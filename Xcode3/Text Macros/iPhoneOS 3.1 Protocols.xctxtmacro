(
	//
	// Protocol implementations for Objective-C & Objective-C++
	//
	// File generated by protocols2textmacros.sh & extract_protocols.sed (v1.5.1)
	//   (Tools by O.Halligon, Sept 2009)
	//
	{
		Identifier = objc.protocols3_1;
		Name = "iPhoneOS 3.1 Protocols implementation";
		IsMenu = YES;
		ComputerLanguages = ( "c.objc", "c.objcpp" );
		IncludeContexts = ( "xcode.lang.objc.implementation" );
		ExcludeContexts = ( "xcode.lang.objc.block", "xcode.lang.string", "xcode.lang.character", "xcode.lang.comment", "xcode.lang.c.preprocessor" );
		// OnlyAtBOL = YES; /* actually useless as the inheritence mechanism seems not to be implemented for this key */
    },

	// 
	// Protocol ABNewPersonViewControllerDelegate
	// 
	{
		Identifier = objc.protocols3_1.ABNewPersonViewControllerDelegate;
		BasedOn = objc.protocols3_1;
		IsMenuItem = YES;
		Name = "ABNewPersonViewControllerDelegate implementation (iPhoneOS 3.1)";
		CompletionPrefix = "ABNewPersonViewControllerDelegate";
		OnlyAtBOL = YES;
		TextString = "
//
// MARK: ABNewPersonViewControllerDelegate implementation
//

- (void)newPersonViewController:(ABNewPersonViewController *)newPersonView didCompleteWithNewPerson:(ABRecordRef)person
{
	// required method
	<#statements_0#>
}
";
	},

	// 
	// Protocol ABPeoplePickerNavigationControllerDelegate
	// 
	{
		Identifier = objc.protocols3_1.ABPeoplePickerNavigationControllerDelegate;
		BasedOn = objc.protocols3_1;
		IsMenuItem = YES;
		Name = "ABPeoplePickerNavigationControllerDelegate implementation (iPhoneOS 3.1)";
		CompletionPrefix = "ABPeoplePickerNavigationControllerDelegate";
		OnlyAtBOL = YES;
		TextString = "
//
// MARK: ABPeoplePickerNavigationControllerDelegate implementation
//

- (void)peoplePickerNavigationControllerDidCancel:(ABPeoplePickerNavigationController *)peoplePicker
{
	// required method
	<#statements_1#>
}
- (BOOL)peoplePickerNavigationController:(ABPeoplePickerNavigationController *)peoplePicker shouldContinueAfterSelectingPerson:(ABRecordRef)person
{
	// required method
	<#statements_2#>
}
- (BOOL)peoplePickerNavigationController:(ABPeoplePickerNavigationController *)peoplePicker shouldContinueAfterSelectingPerson:(ABRecordRef)person property:(ABPropertyID)property identifier:(ABMultiValueIdentifier)identifier
{
	// required method
	<#statements_3#>
}
";
	},

	// 
	// Protocol ABPersonViewControllerDelegate
	// 
	{
		Identifier = objc.protocols3_1.ABPersonViewControllerDelegate;
		BasedOn = objc.protocols3_1;
		IsMenuItem = YES;
		Name = "ABPersonViewControllerDelegate implementation (iPhoneOS 3.1)";
		CompletionPrefix = "ABPersonViewControllerDelegate";
		OnlyAtBOL = YES;
		TextString = "
//
// MARK: ABPersonViewControllerDelegate implementation
//

- (BOOL)personViewController:(ABPersonViewController *)personViewController shouldPerformDefaultActionForPerson:(ABRecordRef)person property:(ABPropertyID)property identifier:(ABMultiValueIdentifier)identifier
{
	// required method
	<#statements_4#>
}
";
	},

	// 
	// Protocol ABUnknownPersonViewControllerDelegate
	// 
	{
		Identifier = objc.protocols3_1.ABUnknownPersonViewControllerDelegate;
		BasedOn = objc.protocols3_1;
		IsMenuItem = YES;
		Name = "ABUnknownPersonViewControllerDelegate implementation (iPhoneOS 3.1)";
		CompletionPrefix = "ABUnknownPersonViewControllerDelegate";
		OnlyAtBOL = YES;
		TextString = "
//
// MARK: ABUnknownPersonViewControllerDelegate implementation
//

- (void)unknownPersonViewController:(ABUnknownPersonViewController *)unknownCardViewController didResolveToPerson:(ABRecordRef)person
{
	// required method
	<#statements_5#>
}
/*
- (BOOL)unknownPersonViewController:(ABUnknownPersonViewController *)personViewController shouldPerformDefaultActionForPerson:(ABRecordRef)person property:(ABPropertyID)property identifier:(ABMultiValueIdentifier)identifier __OSX_AVAILABLE_STARTING(__MAC_NA, __IPHONE_3_0)
{
	// optional method
	<#statements_6#>
}
*/
";
	},

	// 
	// Protocol AVAudioPlayerDelegate
	// 
	{
		Identifier = objc.protocols3_1.AVAudioPlayerDelegate;
		BasedOn = objc.protocols3_1;
		IsMenuItem = YES;
		Name = "AVAudioPlayerDelegate implementation (iPhoneOS 3.1)";
		CompletionPrefix = "AVAudioPlayerDelegate";
		OnlyAtBOL = YES;
		TextString = "
//
// MARK: AVAudioPlayerDelegate implementation
//

/* audioPlayerDidFinishPlaying:successfully: is called when a sound has finished playing. This method is NOT called if the player is stopped due to an interruption. */
/*
- (void)audioPlayerDidFinishPlaying:(AVAudioPlayer *)player successfully:(BOOL)flag
{
	// optional method
	<#statements_7#>
}
*/
/* if an error occurs while decoding it will be reported to the delegate. */
/*
- (void)audioPlayerDecodeErrorDidOccur:(AVAudioPlayer *)player error:(NSError *)error
{
	// optional method
	<#statements_8#>
}
*/
/* audioPlayerBeginInterruption: is called when the audio session has been interrupted while the player was playing. The player will have been paused. */
/*
- (void)audioPlayerBeginInterruption:(AVAudioPlayer *)player
{
	// optional method
	<#statements_9#>
}
*/
/* audioPlayerEndInterruption: is called when the audio session interruption has ended and this player had been interrupted while playing. 
The player can be restarted at this point. */
/*
- (void)audioPlayerEndInterruption:(AVAudioPlayer *)player
{
	// optional method
	<#statements_10#>
}
*/
";
	},

	// 
	// Protocol NSFetchedResultsSectionInfo
	// 
	{
		Identifier = objc.protocols3_1.NSFetchedResultsSectionInfo;
		BasedOn = objc.protocols3_1;
		IsMenuItem = YES;
		Name = "NSFetchedResultsSectionInfo implementation (iPhoneOS 3.1)";
		CompletionPrefix = "NSFetchedResultsSectionInfo";
		OnlyAtBOL = YES;
		TextString = "
//
// MARK: NSFetchedResultsSectionInfo implementation
//

/* Name of the section
*/
/* Title of the section (used when displaying the index)
*/
/* Number of objects in section
*/
/* Returns the array of objects in the section.
*/
";
	}, // NSFetchedResultsSectionInfo

	// 
	// Protocol NSFetchedResultsControllerDelegate
	// 
	{
		Identifier = objc.protocols3_1.NSFetchedResultsControllerDelegate;
		BasedOn = objc.protocols3_1;
		IsMenuItem = YES;
		Name = "NSFetchedResultsControllerDelegate implementation (iPhoneOS 3.1)";
		CompletionPrefix = "NSFetchedResultsControllerDelegate";
		OnlyAtBOL = YES;
		TextString = "
//
// MARK: NSFetchedResultsControllerDelegate implementation
//

/* Notifies the delegate that a fetched object has been changed due to an add, remove, move, or update. 
	controller - controller instance that noticed the change on its fetched objects
	anObject - changed object
	indexPath - indexPath of changed object (nil for inserts)
	type - indicates if the change was an insert, delete, move, or update
	newIndexPath - the destination path for inserted or moved objects, nil otherwise
	
	Changes are reported with the following heuristics:

	On Adds and Removes, only the Added/Removed object is reported. It's assumed that all objects that come after the affected object are also moved, but these moves are not reported. 
	The Move object is reported when the changed attribute on the object is one of the sort descriptors used in the fetch request.  An update of the object is assumed in this case, but no separate update message is sent to the delegate.
	The Update object is reported when an object's state changes, and the changed attributes aren't part of the sort keys. 
*/
/*
- (void)controller:(NSFetchedResultsController *)controller didChangeObject:(id)anObject atIndexPath:(NSIndexPath *)indexPath forChangeType:(NSFetchedResultsChangeType)type newIndexPath:(NSIndexPath *)newIndexPath
{
	// optional method
	<#statements_11#>
}
*/
/* Notifies the delegate of added or removed sections. 

	controller - controller instance that noticed the change on its sections
	sectionInfo - changed section
	index - index of changed section
	type - indicates if the change was an insert or delete

	Changes on section info are reported before changes on fetchedObjects. 
*/
/*
- (void)controller:(NSFetchedResultsController *)controller didChangeSection:(id <NSFetchedResultsSectionInfo>)sectionInfo atIndex:(NSUInteger)sectionIndex forChangeType:(NSFetchedResultsChangeType)type
{
	// optional method
	<#statements_12#>
}
*/
/* Notifies the delegate that section and object changes are about to be processed and notifications will be sent. 
   Clients utilizing a UITableView may prepare for a batch of updates by responding to this method with -beginUpdates
*/
/*
- (void)controllerWillChangeContent:(NSFetchedResultsController *)controller
{
	// optional method
	<#statements_13#>
}
*/
/* Notifies the delegate that all section and object changes have been sent. 
*/
/*
- (void)controllerDidChangeContent:(NSFetchedResultsController *)controller
{
	// optional method
	<#statements_14#>
}
*/
";
	},

	// 
	// Protocol CLLocationManagerDelegate
	// 
	{
		Identifier = objc.protocols3_1.CLLocationManagerDelegate;
		BasedOn = objc.protocols3_1;
		IsMenuItem = YES;
		Name = "CLLocationManagerDelegate implementation (iPhoneOS 3.1)";
		CompletionPrefix = "CLLocationManagerDelegate";
		OnlyAtBOL = YES;
		TextString = "
//
// MARK: CLLocationManagerDelegate implementation
//

/*
 *  locationManager:didUpdateToLocation:fromLocation:
 *  
 *  Discussion:
 *    Invoked when a new location is available. oldLocation may be nil if there is no previous location
 *    available.
 */
/*
- (void)locationManager:(CLLocationManager *)manager
	didUpdateToLocation:(CLLocation *)newLocation
	fromLocation:(CLLocation *)oldLocation
{
	// optional method
	<#statements_15#>
}
*/
/*
 *  locationManager:didUpdateHeading:
 *  
 *  Discussion:
 *    Invoked when a new heading is available.
 */
/*
- (void)locationManager:(CLLocationManager *)manager
       didUpdateHeading:(CLHeading *)newHeading __OSX_AVAILABLE_STARTING(__MAC_NA,__IPHONE_3_0)
{
	// optional method
	<#statements_16#>
}
*/
/*
 *  locationManager:shouldDisplayHeadingCalibrationForDuration:
 *
 *  Discussion:
 *    Invoked when a new heading is available. Return YES to display heading calibration info. The display 
 *    will remain until heading is calibrated, unless dismissed early via dismissHeadingCalibrationDisplay.
 */
/*
- (BOOL)locationManagerShouldDisplayHeadingCalibration:(CLLocationManager *)manager  __OSX_AVAILABLE_STARTING(__MAC_NA,__IPHONE_3_0)
{
	// optional method
	<#statements_17#>
}
*/
/*
 *  locationManager:didFailWithError:
 *  
 *  Discussion:
 *    Invoked when an error has occurred. Error types are defined in \"CLError.h\".
 */
/*
- (void)locationManager:(CLLocationManager *)manager
	didFailWithError:(NSError *)error
{
	// optional method
	<#statements_18#>
}
*/
";
	},

	// 
	// Protocol EAAccessoryDelegate
	// 
	{
		Identifier = objc.protocols3_1.EAAccessoryDelegate;
		BasedOn = objc.protocols3_1;
		IsMenuItem = YES;
		Name = "EAAccessoryDelegate implementation (iPhoneOS 3.1)";
		CompletionPrefix = "EAAccessoryDelegate";
		OnlyAtBOL = YES;
		TextString = "
//
// MARK: EAAccessoryDelegate implementation
//

/*
- (void)accessoryDidDisconnect:(EAAccessory *)accessory __OSX_AVAILABLE_STARTING(__MAC_NA,__IPHONE_3_0)
{
	// optional method
	<#statements_19#>
}
*/
";
	},

	// 
	// Protocol NSDecimalNumberBehaviors
	// 
	{
		Identifier = objc.protocols3_1.NSDecimalNumberBehaviors;
		BasedOn = objc.protocols3_1;
		IsMenuItem = YES;
		Name = "NSDecimalNumberBehaviors implementation (iPhoneOS 3.1)";
		CompletionPrefix = "NSDecimalNumberBehaviors";
		OnlyAtBOL = YES;
		TextString = "
//
// MARK: NSDecimalNumberBehaviors implementation
//

- (NSRoundingMode)roundingMode
{
	// required method
	<#statements_20#>
}
- (short)scale
{
	// required method
	<#statements_21#>
}
- (NSDecimalNumber *)exceptionDuringOperation:(SEL)operation error:(NSCalculationError)error leftOperand:(NSDecimalNumber *)leftOperand rightOperand:(NSDecimalNumber *)rightOperand
{
	// required method
	<#statements_22#>
}
";
	},

	// 
	// Protocol NSFastEnumeration
	// 
	{
		Identifier = objc.protocols3_1.NSFastEnumeration;
		BasedOn = objc.protocols3_1;
		IsMenuItem = YES;
		Name = "NSFastEnumeration implementation (iPhoneOS 3.1)";
		CompletionPrefix = "NSFastEnumeration";
		OnlyAtBOL = YES;
		TextString = "
//
// MARK: NSFastEnumeration implementation
//

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(id *)stackbuf count:(NSUInteger)len
{
	// required method
	<#statements_23#>
}
";
	},

	// 
	// Protocol NSLocking
	// 
	{
		Identifier = objc.protocols3_1.NSLocking;
		BasedOn = objc.protocols3_1;
		IsMenuItem = YES;
		Name = "NSLocking implementation (iPhoneOS 3.1)";
		CompletionPrefix = "NSLocking";
		OnlyAtBOL = YES;
		TextString = "
//
// MARK: NSLocking implementation
//

- (void)lock
{
	// required method
	<#statements_24#>
}
- (void)unlock
{
	// required method
	<#statements_25#>
}
";
	},

	// 
	// Protocol NSURLAuthenticationChallengeSender
	// 
	{
		Identifier = objc.protocols3_1.NSURLAuthenticationChallengeSender;
		BasedOn = objc.protocols3_1;
		IsMenuItem = YES;
		Name = "NSURLAuthenticationChallengeSender implementation (iPhoneOS 3.1)";
		CompletionPrefix = "NSURLAuthenticationChallengeSender";
		OnlyAtBOL = YES;
		TextString = "
//
// MARK: NSURLAuthenticationChallengeSender implementation
//

/*!
    @method useCredential:forAuthenticationChallenge:
*/
- (void)useCredential:(NSURLCredential *)credential forAuthenticationChallenge:(NSURLAuthenticationChallenge *)challenge
{
	// required method
	<#statements_26#>
}
/*!
    @method continueWithoutCredentialForAuthenticationChallenge:
*/
- (void)continueWithoutCredentialForAuthenticationChallenge:(NSURLAuthenticationChallenge *)challenge
{
	// required method
	<#statements_27#>
}
/*!
    @method cancelAuthenticationChallenge:
*/
- (void)cancelAuthenticationChallenge:(NSURLAuthenticationChallenge *)challenge
{
	// required method
	<#statements_28#>
}
";
	},

	// 
	// Protocol NSURLProtocolClient
	// 
	{
		Identifier = objc.protocols3_1.NSURLProtocolClient;
		BasedOn = objc.protocols3_1;
		IsMenuItem = YES;
		Name = "NSURLProtocolClient implementation (iPhoneOS 3.1)";
		CompletionPrefix = "NSURLProtocolClient";
		OnlyAtBOL = YES;
		TextString = "
//
// MARK: NSURLProtocolClient implementation
//

/*!
@method URLProtocol:wasRedirectedToRequest:
 @abstract Indicates to an NSURLProtocolClient that a redirect has
 occurred.
 @param URLProtocol the NSURLProtocol object sending the message.
 @param request the NSURLRequest to which the protocol implementation
 has redirected.
 */
- (void)URLProtocol:(NSURLProtocol *)protocol wasRedirectedToRequest:(NSURLRequest *)request redirectResponse:(NSURLResponse *)redirectResponse
{
	// required method
	<#statements_29#>
}
    /*!
@method URLProtocol:cachedResponseIsValid:
     @abstract Indicates to an NSURLProtocolClient that the protocol
     implementation has examined a cached response and has
     determined that it is valid.
     @param URLProtocol the NSURLProtocol object sending the message.
     @param cachedResponse the NSCachedURLResponse object that has
     examined and is valid.
     */
- (void)URLProtocol:(NSURLProtocol *)protocol cachedResponseIsValid:(NSCachedURLResponse *)cachedResponse
{
	// required method
	<#statements_30#>
}
    /*!
@method URLProtocol:didReceiveResponse:
     @abstract Indicates to an NSURLProtocolClient that the protocol
     implementation has created an NSURLResponse for the current load.
     @param URLProtocol the NSURLProtocol object sending the message.
     @param response the NSURLResponse object the protocol implementation
     has created.
     @param cacheStoragePolicy The NSURLCacheStoragePolicy the protocol
     has determined should be used for the given response if the
     response is to be stored in a cache.
     */
- (void)URLProtocol:(NSURLProtocol *)protocol didReceiveResponse:(NSURLResponse *)response cacheStoragePolicy:(NSURLCacheStoragePolicy)policy
{
	// required method
	<#statements_31#>
}
    /*!
@method URLProtocol:didLoadData:
     @abstract Indicates to an NSURLProtocolClient that the protocol
     implementation has loaded URL data.
     @discussion The data object must contain only new data loaded since
     the previous call to this method (if any), not cumulative data for
     the entire load.
     @param URLProtocol the NSURLProtocol object sending the message.
     @param data URL load data being made available.
     */
- (void)URLProtocol:(NSURLProtocol *)protocol didLoadData:(NSData *)data
{
	// required method
	<#statements_32#>
}
    /*!
@method URLProtocolDidFinishLoading:
     @abstract Indicates to an NSURLProtocolClient that the protocol
     implementation has finished loading successfully.
     @param URLProtocol the NSURLProtocol object sending the message.
     */
- (void)URLProtocolDidFinishLoading:(NSURLProtocol *)protocol
{
	// required method
	<#statements_33#>
}
    /*!
                @method URLProtocol:didFailWithError:
     @abstract Indicates to an NSURLProtocolClient that the protocol
     implementation has failed to load successfully.
     @param URLProtocol the NSURLProtocol object sending the message.
     @param error The error that caused the load to fail.
     */
- (void)URLProtocol:(NSURLProtocol *)protocol didFailWithError:(NSError *)error
{
	// required method
	<#statements_34#>
}
    /*!
@method URLProtocol:didReceiveAuthenticationChallenge:
     @abstract Start authentication for the specified request
     @param protocol The protocol object requesting authentication.
     @param challenge The authentication challenge.
     @discussion The protocol client guarantees that it will answer the
     request on the same thread that called this method. It may add a
     default credential to the challenge it issues to the connection delegate,
     if the protocol did not provide one.
     */
- (void)URLProtocol:(NSURLProtocol *)protocol didReceiveAuthenticationChallenge:(NSURLAuthenticationChallenge *)challenge
{
	// required method
	<#statements_35#>
}
    /*!
@method URLProtocol:didCancelAuthenticationChallenge:
     @abstract Cancel authentication for the specified request
     @param protocol The protocol object cancelling authentication.
     @param challenge The authentication challenge.
     */
- (void)URLProtocol:(NSURLProtocol *)protocol didCancelAuthenticationChallenge:(NSURLAuthenticationChallenge *)challenge
{
	// required method
	<#statements_36#>
}
";
	},

	// 
	// Protocol GKPeerPickerControllerDelegate
	// 
	{
		Identifier = objc.protocols3_1.GKPeerPickerControllerDelegate;
		BasedOn = objc.protocols3_1;
		IsMenuItem = YES;
		Name = "GKPeerPickerControllerDelegate implementation (iPhoneOS 3.1)";
		CompletionPrefix = "GKPeerPickerControllerDelegate";
		OnlyAtBOL = YES;
		TextString = "
//
// MARK: GKPeerPickerControllerDelegate implementation
//

/* Notifies delegate that a connection type was chosen by the user.
 */
/*
- (void)peerPickerController:(GKPeerPickerController *)picker didSelectConnectionType:(GKPeerPickerConnectionType)type
{
	// optional method
	<#statements_37#>
}
*/
/* Notifies delegate that the connection type is requesting a GKSession object.
 
 You should return a valid GKSession object for use by the picker. If this method is not implemented or returns 'nil', a default GKSession is created on the delegate's behalf.
 */
/*
- (GKSession *)peerPickerController:(GKPeerPickerController *)picker sessionForConnectionType:(GKPeerPickerConnectionType)type
{
	// optional method
	<#statements_38#>
}
*/
/* Notifies delegate that the peer was connected to a GKSession.
 */
/*
- (void)peerPickerController:(GKPeerPickerController *)picker didConnectPeer:(NSString *)peerID toSession:(GKSession *)session
{
	// optional method
	<#statements_39#>
}
*/
/* Notifies delegate that the user cancelled the picker.
 */
/*
- (void)peerPickerControllerDidCancel:(GKPeerPickerController *)picker
{
	// optional method
	<#statements_40#>
}
*/
";
	},

	// 
	// Protocol GKSessionDelegate
	// 
	{
		Identifier = objc.protocols3_1.GKSessionDelegate;
		BasedOn = objc.protocols3_1;
		IsMenuItem = YES;
		Name = "GKSessionDelegate implementation (iPhoneOS 3.1)";
		CompletionPrefix = "GKSessionDelegate";
		OnlyAtBOL = YES;
		TextString = "
//
// MARK: GKSessionDelegate implementation
//

/* Indicates a state change for the given peer.
*/
/*
- (void)session:(GKSession *)session peer:(NSString *)peerID didChangeState:(GKPeerConnectionState)state
{
	// optional method
	<#statements_41#>
}
*/
/* Indicates a connection request was received from another peer. 
 
Accept by calling -acceptConnectionFromPeer:
Deny by calling -denyConnectionFromPeer:
*/
/*
- (void)session:(GKSession *)session didReceiveConnectionRequestFromPeer:(NSString *)peerID
{
	// optional method
	<#statements_42#>
}
*/
/* Indicates a connection error occurred with a peer, which includes connection request failures, or disconnects due to timeouts.
*/
/*
- (void)session:(GKSession *)session connectionWithPeerFailed:(NSString *)peerID withError:(NSError *)error
{
	// optional method
	<#statements_43#>
}
*/
/* Indicates an error occurred with the session such as failing to make available.
*/
/*
- (void)session:(GKSession *)session didFailWithError:(NSError *)error
{
	// optional method
	<#statements_44#>
}
*/
";
	},

	// 
	// Protocol GKVoiceChatClient
	// 
	{
		Identifier = objc.protocols3_1.GKVoiceChatClient;
		BasedOn = objc.protocols3_1;
		IsMenuItem = YES;
		Name = "GKVoiceChatClient implementation (iPhoneOS 3.1)";
		CompletionPrefix = "GKVoiceChatClient";
		OnlyAtBOL = YES;
		TextString = "
//
// MARK: GKVoiceChatClient implementation
//

- (void)voiceChatService:(GKVoiceChatService *)voiceChatService sendData:(NSData *)data toParticipantID:(NSString *)participantID
{
	// required method
	//must be sent within some reasonble period of time and should accept at least 512 bytes.
	<#statements_45#>
}
- (NSString *)participantID
{
	// required method
	// voice chat client's participant ID
	<#statements_46#>
}
/*
- (void)voiceChatService:(GKVoiceChatService *)voiceChatService sendRealTimeData:(NSData *)data toParticipantID:(NSString *)participantID
{
	// optional method
	<#statements_47#>
}
*/
/*
- (void)voiceChatService:(GKVoiceChatService *)voiceChatService didStartWithParticipantID:(NSString *)participantID
{
	// optional method
	<#statements_48#>
}
*/
/*
- (void)voiceChatService:(GKVoiceChatService *)voiceChatService didNotStartWithParticipantID:(NSString *)participantID error:(NSError *)error
{
	// optional method
	<#statements_49#>
}
*/
/*
- (void)voiceChatService:(GKVoiceChatService *)voiceChatService didStopWithParticipantID:(NSString *)participantID error:(NSError *)error
{
	// optional method
	<#statements_50#>
}
*/
/*
- (void)voiceChatService:(GKVoiceChatService *)voiceChatService didReceiveInvitationFromParticipantID:(NSString *)participantID callID:(NSInteger)callID
{
	// optional method
	<#statements_51#>
}
*/
";
	},

	// 
	// Protocol MKAnnotation
	// 
	{
		Identifier = objc.protocols3_1.MKAnnotation;
		BasedOn = objc.protocols3_1;
		IsMenuItem = YES;
		Name = "MKAnnotation implementation (iPhoneOS 3.1)";
		CompletionPrefix = "MKAnnotation";
		OnlyAtBOL = YES;
		TextString = "
//
// MARK: MKAnnotation implementation
//

/*
- (NSString *)title
{
	// optional method
	<#statements_52#>
}
*/
/*
- (NSString *)subtitle
{
	// optional method
	<#statements_53#>
}
*/
";
	},

	// 
	// Protocol MKMapViewDelegate
	// 
	{
		Identifier = objc.protocols3_1.MKMapViewDelegate;
		BasedOn = objc.protocols3_1;
		IsMenuItem = YES;
		Name = "MKMapViewDelegate implementation (iPhoneOS 3.1)";
		CompletionPrefix = "MKMapViewDelegate";
		OnlyAtBOL = YES;
		TextString = "
//
// MARK: MKMapViewDelegate implementation
//

/*
- (void)mapView:(MKMapView *)mapView regionWillChangeAnimated:(BOOL)animated
{
	// optional method
	<#statements_54#>
}
*/
/*
- (void)mapView:(MKMapView *)mapView regionDidChangeAnimated:(BOOL)animated
{
	// optional method
	<#statements_55#>
}
*/
/*
- (void)mapViewWillStartLoadingMap:(MKMapView *)mapView
{
	// optional method
	<#statements_56#>
}
*/
/*
- (void)mapViewDidFinishLoadingMap:(MKMapView *)mapView
{
	// optional method
	<#statements_57#>
}
*/
/*
- (void)mapViewDidFailLoadingMap:(MKMapView *)mapView withError:(NSError *)error
{
	// optional method
	<#statements_58#>
}
*/
/*
- (MKAnnotationView *)mapView:(MKMapView *)mapView viewForAnnotation:(id <MKAnnotation>)annotation
{
	// optional method
	<#statements_59#>
}
*/
/*
- (void)mapView:(MKMapView *)mapView didAddAnnotationViews:(NSArray *)views
{
	// optional method
	<#statements_60#>
}
*/
/*
- (void)mapView:(MKMapView *)mapView annotationView:(MKAnnotationView *)view calloutAccessoryControlTapped:(UIControl *)control
{
	// optional method
	<#statements_61#>
}
*/
";
	},

	// 
	// Protocol MKReverseGeocoderDelegate
	// 
	{
		Identifier = objc.protocols3_1.MKReverseGeocoderDelegate;
		BasedOn = objc.protocols3_1;
		IsMenuItem = YES;
		Name = "MKReverseGeocoderDelegate implementation (iPhoneOS 3.1)";
		CompletionPrefix = "MKReverseGeocoderDelegate";
		OnlyAtBOL = YES;
		TextString = "
//
// MARK: MKReverseGeocoderDelegate implementation
//

- (void)reverseGeocoder:(MKReverseGeocoder *)geocoder didFindPlacemark:(MKPlacemark *)placemark
{
	// required method
	<#statements_62#>
}
- (void)reverseGeocoder:(MKReverseGeocoder *)geocoder didFailWithError:(NSError *)error
{
	// required method
	<#statements_63#>
}
";
	},

	// 
	// Protocol MPMediaPickerControllerDelegate
	// 
	{
		Identifier = objc.protocols3_1.MPMediaPickerControllerDelegate;
		BasedOn = objc.protocols3_1;
		IsMenuItem = YES;
		Name = "MPMediaPickerControllerDelegate implementation (iPhoneOS 3.1)";
		CompletionPrefix = "MPMediaPickerControllerDelegate";
		OnlyAtBOL = YES;
		TextString = "
//
// MARK: MPMediaPickerControllerDelegate implementation
//

/*
- (void)mediaPicker:(MPMediaPickerController *)mediaPicker didPickMediaItems:(MPMediaItemCollection *)mediaItemCollection
{
	// optional method
	<#statements_64#>
}
*/
/*
- (void)mediaPickerDidCancel:(MPMediaPickerController *)mediaPicker
{
	// optional method
	<#statements_65#>
}
*/
";
	},

	// 
	// Protocol MFMailComposeViewControllerDelegate
	// 
	{
		Identifier = objc.protocols3_1.MFMailComposeViewControllerDelegate;
		BasedOn = objc.protocols3_1;
		IsMenuItem = YES;
		Name = "MFMailComposeViewControllerDelegate implementation (iPhoneOS 3.1)";
		CompletionPrefix = "MFMailComposeViewControllerDelegate";
		OnlyAtBOL = YES;
		TextString = "
//
// MARK: MFMailComposeViewControllerDelegate implementation
//

/*!
    @method     mailComposeController:didFinishWithResult:error:
    @abstract   Delegate callback which is called upon user's completion of email composition.
    @discussion This delegate callback will be called when the user completes the email composition.  How the user chose
                to complete this task will be given as one of the parameters to the callback.  Upon this call, the client
                should remove the view associated with the controller, typically by dismissing modally.
    @param      controller   The MFMailComposeViewController instance which is returning the result.
    @param      result       MFMailComposeResult indicating how the user chose to complete the composition process.
    @param      error        NSError indicating the failure reason if failure did occur.  This will be <tt>nil</tt> if
                             result did not indicate failure.
*/
/*
- (void)mailComposeController:(MFMailComposeViewController *)controller didFinishWithResult:(MFMailComposeResult)result error:(NSError *)error __OSX_AVAILABLE_STARTING(__MAC_NA,__IPHONE_3_0)
{
	// optional method
	<#statements_66#>
}
*/
";
	},

	// 
	// Protocol EAGLDrawable
	// 
	{
		Identifier = objc.protocols3_1.EAGLDrawable;
		BasedOn = objc.protocols3_1;
		IsMenuItem = YES;
		Name = "EAGLDrawable implementation (iPhoneOS 3.1)";
		CompletionPrefix = "EAGLDrawable";
		OnlyAtBOL = YES;
		TextString = "
//
// MARK: EAGLDrawable implementation
//

/* Contains keys from kEAGLDrawableProperty* above */
";
	},

	// 
	// Protocol CAMediaTiming
	// 
	{
		Identifier = objc.protocols3_1.CAMediaTiming;
		BasedOn = objc.protocols3_1;
		IsMenuItem = YES;
		Name = "CAMediaTiming implementation (iPhoneOS 3.1)";
		CompletionPrefix = "CAMediaTiming";
		OnlyAtBOL = YES;
		TextString = "
//
// MARK: CAMediaTiming implementation
//

/* The begin time of the object, in relation to its parent object, if
 * applicable. Defaults to 0. */
/* The basic duration of the object. Defaults to 0. */
/* The rate of the layer. Used to scale parent time to local time, e.g.
 * if rate is 2, local time progresses twice as fast as parent time.
 * Defaults to 1. */
/* Additional offset in active local time. i.e. to convert from parent
 * time tp to active local time t: t = (tp - begin) * speed + offset.
 * One use of this is to \"pause\" a layer by setting `speed' to zero and
 * `offset' to a suitable value. Defaults to 0. */
/* The repeat count of the object. May be fractional. Defaults to 0. */
/* The repeat duration of the object. Defaults to 0. */
/* When true, the object plays backwards after playing forwards. Defaults
 * to false. */
/* Defines how the timed object behaves outside its active duration.
 * Local time may be clamped to either end of the active duration, or
 * the element may be removed from the presentation. The legal values
 * are `backwards', `forwards', `both' and `removed'. Defaults to
 * `removed'. */
";
	},

	// 
	// Protocol SKPaymentTransactionObserver
	// 
	{
		Identifier = objc.protocols3_1.SKPaymentTransactionObserver;
		BasedOn = objc.protocols3_1;
		IsMenuItem = YES;
		Name = "SKPaymentTransactionObserver implementation (iPhoneOS 3.1)";
		CompletionPrefix = "SKPaymentTransactionObserver";
		OnlyAtBOL = YES;
		TextString = "
//
// MARK: SKPaymentTransactionObserver implementation
//

- (void)paymentQueue:(SKPaymentQueue *)queue updatedTransactions:(NSArray *)transactions __OSX_AVAILABLE_STARTING(__MAC_NA,__IPHONE_3_0)
{
	// required method
	<#statements_67#>
}
/*
- (void)paymentQueue:(SKPaymentQueue *)queue removedTransactions:(NSArray *)transactions __OSX_AVAILABLE_STARTING(__MAC_NA,__IPHONE_3_0)
{
	// optional method
	<#statements_68#>
}
*/
/*
- (void)paymentQueue:(SKPaymentQueue *)queue restoreCompletedTransactionsFailedWithError:(NSError *)error __OSX_AVAILABLE_STARTING(__MAC_NA,__IPHONE_3_0)
{
	// optional method
	<#statements_69#>
}
*/
/*
- (void)paymentQueueRestoreCompletedTransactionsFinished:(SKPaymentQueue *)queue __OSX_AVAILABLE_STARTING(__MAC_NA,__IPHONE_3_0)
{
	// optional method
	<#statements_70#>
}
*/
";
	},

	// 
	// Protocol SKProductsRequestDelegate
	// 
	{
		Identifier = objc.protocols3_1.SKProductsRequestDelegate;
		BasedOn = objc.protocols3_1;
		IsMenuItem = YES;
		Name = "SKProductsRequestDelegate implementation (iPhoneOS 3.1)";
		CompletionPrefix = "SKProductsRequestDelegate";
		OnlyAtBOL = YES;
		TextString = "
//
// MARK: SKProductsRequestDelegate implementation
//

- (void)productsRequest:(SKProductsRequest *)request didReceiveResponse:(SKProductsResponse *)response __OSX_AVAILABLE_STARTING(__MAC_NA,__IPHONE_3_0)
{
	// required method
	<#statements_71#>
}
";
	},

	// 
	// Protocol SKRequestDelegate
	// 
	{
		Identifier = objc.protocols3_1.SKRequestDelegate;
		BasedOn = objc.protocols3_1;
		IsMenuItem = YES;
		Name = "SKRequestDelegate implementation (iPhoneOS 3.1)";
		CompletionPrefix = "SKRequestDelegate";
		OnlyAtBOL = YES;
		TextString = "
//
// MARK: SKRequestDelegate implementation
//

/*
- (void)requestDidFinish:(SKRequest *)request __OSX_AVAILABLE_STARTING(__MAC_NA,__IPHONE_3_0)
{
	// optional method
	<#statements_72#>
}
*/
/*
- (void)request:(SKRequest *)request didFailWithError:(NSError *)error __OSX_AVAILABLE_STARTING(__MAC_NA,__IPHONE_3_0)
{
	// optional method
	<#statements_73#>
}
*/
";
	},

	// 
	// Protocol UIAccelerometerDelegate
	// 
	{
		Identifier = objc.protocols3_1.UIAccelerometerDelegate;
		BasedOn = objc.protocols3_1;
		IsMenuItem = YES;
		Name = "UIAccelerometerDelegate implementation (iPhoneOS 3.1)";
		CompletionPrefix = "UIAccelerometerDelegate";
		OnlyAtBOL = YES;
		TextString = "
//
// MARK: UIAccelerometerDelegate implementation
//

/*
- (void)accelerometer:(UIAccelerometer *)accelerometer didAccelerate:(UIAcceleration *)acceleration
{
	// optional method
	<#statements_74#>
}
*/
";
	},

	// 
	// Protocol UIActionSheetDelegate
	// 
	{
		Identifier = objc.protocols3_1.UIActionSheetDelegate;
		BasedOn = objc.protocols3_1;
		IsMenuItem = YES;
		Name = "UIActionSheetDelegate implementation (iPhoneOS 3.1)";
		CompletionPrefix = "UIActionSheetDelegate";
		OnlyAtBOL = YES;
		TextString = "
//
// MARK: UIActionSheetDelegate implementation
//

/*
- (void)actionSheet:(UIActionSheet *)actionSheet clickedButtonAtIndex:(NSInteger)buttonIndex
{
	// optional method
	<#statements_75#>
}
*/
/*
- (void)actionSheetCancel:(UIActionSheet *)actionSheet
{
	// optional method
	<#statements_76#>
}
*/
/*
- (void)willPresentActionSheet:(UIActionSheet *)actionSheet
{
	// optional method
	// before animation and showing view
	<#statements_77#>
}
*/
/*
- (void)didPresentActionSheet:(UIActionSheet *)actionSheet
{
	// optional method
	// after animation
	<#statements_78#>
}
*/
/*
- (void)actionSheet:(UIActionSheet *)actionSheet willDismissWithButtonIndex:(NSInteger)buttonIndex
{
	// optional method
	// before animation and hiding view
	<#statements_79#>
}
*/
/*
- (void)actionSheet:(UIActionSheet *)actionSheet didDismissWithButtonIndex:(NSInteger)buttonIndex
{
	// optional method
	// after animation
	<#statements_80#>
}
*/
";
	},

	// 
	// Protocol UIAlertViewDelegate
	// 
	{
		Identifier = objc.protocols3_1.UIAlertViewDelegate;
		BasedOn = objc.protocols3_1;
		IsMenuItem = YES;
		Name = "UIAlertViewDelegate implementation (iPhoneOS 3.1)";
		CompletionPrefix = "UIAlertViewDelegate";
		OnlyAtBOL = YES;
		TextString = "
//
// MARK: UIAlertViewDelegate implementation
//

/*
- (void)alertView:(UIAlertView *)alertView clickedButtonAtIndex:(NSInteger)buttonIndex
{
	// optional method
	<#statements_81#>
}
*/
/*
- (void)alertViewCancel:(UIAlertView *)alertView
{
	// optional method
	<#statements_82#>
}
*/
/*
- (void)willPresentAlertView:(UIAlertView *)alertView
{
	// optional method
	// before animation and showing view
	<#statements_83#>
}
*/
/*
- (void)didPresentAlertView:(UIAlertView *)alertView
{
	// optional method
	// after animation
	<#statements_84#>
}
*/
/*
- (void)alertView:(UIAlertView *)alertView willDismissWithButtonIndex:(NSInteger)buttonIndex
{
	// optional method
	// before animation and hiding view
	<#statements_85#>
}
*/
/*
- (void)alertView:(UIAlertView *)alertView didDismissWithButtonIndex:(NSInteger)buttonIndex
{
	// optional method
	// after animation
	<#statements_86#>
}
*/
";
	},

	// 
	// Protocol UIApplicationDelegate
	// 
	{
		Identifier = objc.protocols3_1.UIApplicationDelegate;
		BasedOn = objc.protocols3_1;
		IsMenuItem = YES;
		Name = "UIApplicationDelegate implementation (iPhoneOS 3.1)";
		CompletionPrefix = "UIApplicationDelegate";
		OnlyAtBOL = YES;
		TextString = "
//
// MARK: UIApplicationDelegate implementation
//

/*
- (void)applicationDidFinishLaunching:(UIApplication *)application
{
	// optional method
	<#statements_87#>
}
*/
/*
- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions __OSX_AVAILABLE_STARTING(__MAC_NA,__IPHONE_3_0)
{
	// optional method
	<#statements_88#>
}
*/
/*
- (void)applicationDidBecomeActive:(UIApplication *)application
{
	// optional method
	<#statements_89#>
}
*/
/*
- (void)applicationWillResignActive:(UIApplication *)application
{
	// optional method
	<#statements_90#>
}
*/
/*
- (BOOL)application:(UIApplication *)application handleOpenURL:(NSURL *)url
{
	// optional method
	// no equiv. notification. return NO if the application can't open for some reason
	<#statements_91#>
}
*/
/*
- (void)applicationDidReceiveMemoryWarning:(UIApplication *)application
{
	// optional method
	// try to clean up as much memory as possible. next step is to terminate app
	<#statements_92#>
}
*/
/*
- (void)applicationWillTerminate:(UIApplication *)application
{
	// optional method
	<#statements_93#>
}
*/
/*
- (void)applicationSignificantTimeChange:(UIApplication *)application
{
	// optional method
	// midnight, carrier time update, daylight savings time change
	<#statements_94#>
}
*/
/*
- (void)application:(UIApplication *)application willChangeStatusBarOrientation:(UIInterfaceOrientation)newStatusBarOrientation duration:(NSTimeInterval)duration
{
	// optional method
	<#statements_95#>
}
*/
/*
- (void)application:(UIApplication *)application didChangeStatusBarOrientation:(UIInterfaceOrientation)oldStatusBarOrientation
{
	// optional method
	<#statements_96#>
}
*/
/*
- (void)application:(UIApplication *)application willChangeStatusBarFrame:(CGRect)newStatusBarFrame
{
	// optional method
	// in screen coordinates
	<#statements_97#>
}
*/
/*
- (void)application:(UIApplication *)application didChangeStatusBarFrame:(CGRect)oldStatusBarFrame
{
	// optional method
	<#statements_98#>
}
*/
/*
- (void)application:(UIApplication *)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)deviceToken __OSX_AVAILABLE_STARTING(__MAC_NA,__IPHONE_3_0)
{
	// optional method
	<#statements_99#>
}
*/
/*
- (void)application:(UIApplication *)application didFailToRegisterForRemoteNotificationsWithError:(NSError *)error __OSX_AVAILABLE_STARTING(__MAC_NA,__IPHONE_3_0)
{
	// optional method
	<#statements_100#>
}
*/
/*
- (void)application:(UIApplication *)application didReceiveRemoteNotification:(NSDictionary *)userInfo __OSX_AVAILABLE_STARTING(__MAC_NA,__IPHONE_3_0)
{
	// optional method
	<#statements_101#>
}
*/
";
	},

	// 
	// Protocol UIImagePickerControllerDelegate
	// 
	{
		Identifier = objc.protocols3_1.UIImagePickerControllerDelegate;
		BasedOn = objc.protocols3_1;
		IsMenuItem = YES;
		Name = "UIImagePickerControllerDelegate implementation (iPhoneOS 3.1)";
		CompletionPrefix = "UIImagePickerControllerDelegate";
		OnlyAtBOL = YES;
		TextString = "
//
// MARK: UIImagePickerControllerDelegate implementation
//

/*
- (void)imagePickerController:(UIImagePickerController *)picker didFinishPickingImage:(UIImage *)image editingInfo:(NSDictionary *)editingInfo __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_NA,__MAC_NA,__IPHONE_2_0,__IPHONE_3_0)
{
	// optional method
	<#statements_102#>
}
*/
/*
- (void)imagePickerController:(UIImagePickerController *)picker didFinishPickingMediaWithInfo:(NSDictionary *)info
{
	// optional method
	<#statements_103#>
}
*/
/*
- (void)imagePickerControllerDidCancel:(UIImagePickerController *)picker
{
	// optional method
	<#statements_104#>
}
*/
";
	},

	// 
	// Protocol UINavigationBarDelegate
	// 
	{
		Identifier = objc.protocols3_1.UINavigationBarDelegate;
		BasedOn = objc.protocols3_1;
		IsMenuItem = YES;
		Name = "UINavigationBarDelegate implementation (iPhoneOS 3.1)";
		CompletionPrefix = "UINavigationBarDelegate";
		OnlyAtBOL = YES;
		TextString = "
//
// MARK: UINavigationBarDelegate implementation
//

/*
- (BOOL)navigationBar:(UINavigationBar *)navigationBar shouldPushItem:(UINavigationItem *)item
{
	// optional method
	// called to push. return NO not to.
	<#statements_105#>
}
*/
/*
- (void)navigationBar:(UINavigationBar *)navigationBar didPushItem:(UINavigationItem *)item
{
	// optional method
	// called at end of animation of push or immediately if not animated
	<#statements_106#>
}
*/
/*
- (BOOL)navigationBar:(UINavigationBar *)navigationBar shouldPopItem:(UINavigationItem *)item
{
	// optional method
	// same as push methods
	<#statements_107#>
}
*/
/*
- (void)navigationBar:(UINavigationBar *)navigationBar didPopItem:(UINavigationItem *)item
{
	// optional method
	<#statements_108#>
}
*/
";
	},

	// 
	// Protocol UINavigationControllerDelegate
	// 
	{
		Identifier = objc.protocols3_1.UINavigationControllerDelegate;
		BasedOn = objc.protocols3_1;
		IsMenuItem = YES;
		Name = "UINavigationControllerDelegate implementation (iPhoneOS 3.1)";
		CompletionPrefix = "UINavigationControllerDelegate";
		OnlyAtBOL = YES;
		TextString = "
//
// MARK: UINavigationControllerDelegate implementation
//

/*
- (void)navigationController:(UINavigationController *)navigationController willShowViewController:(UIViewController *)viewController animated:(BOOL)animated
{
	// optional method
	<#statements_109#>
}
*/
/*
- (void)navigationController:(UINavigationController *)navigationController didShowViewController:(UIViewController *)viewController animated:(BOOL)animated
{
	// optional method
	<#statements_110#>
}
*/
";
	},

	// 
	// Protocol UIPickerViewDataSource
	// 
	{
		Identifier = objc.protocols3_1.UIPickerViewDataSource;
		BasedOn = objc.protocols3_1;
		IsMenuItem = YES;
		Name = "UIPickerViewDataSource implementation (iPhoneOS 3.1)";
		CompletionPrefix = "UIPickerViewDataSource";
		OnlyAtBOL = YES;
		TextString = "
//
// MARK: UIPickerViewDataSource implementation
//

- (NSInteger)numberOfComponentsInPickerView:(UIPickerView *)pickerView
{
	// required method
	<#statements_111#>
}
- (NSInteger)pickerView:(UIPickerView *)pickerView numberOfRowsInComponent:(NSInteger)component
{
	// required method
	<#statements_112#>
}
";
	},

	// 
	// Protocol UIPickerViewDelegate
	// 
	{
		Identifier = objc.protocols3_1.UIPickerViewDelegate;
		BasedOn = objc.protocols3_1;
		IsMenuItem = YES;
		Name = "UIPickerViewDelegate implementation (iPhoneOS 3.1)";
		CompletionPrefix = "UIPickerViewDelegate";
		OnlyAtBOL = YES;
		TextString = "
//
// MARK: UIPickerViewDelegate implementation
//

/*
- (CGFloat)pickerView:(UIPickerView *)pickerView widthForComponent:(NSInteger)component
{
	// optional method
	<#statements_113#>
}
*/
/*
- (CGFloat)pickerView:(UIPickerView *)pickerView rowHeightForComponent:(NSInteger)component
{
	// optional method
	<#statements_114#>
}
*/
/*
- (NSString *)pickerView:(UIPickerView *)pickerView titleForRow:(NSInteger)row forComponent:(NSInteger)component
{
	// optional method
	<#statements_115#>
}
*/
/*
- (UIView *)pickerView:(UIPickerView *)pickerView viewForRow:(NSInteger)row forComponent:(NSInteger)component reusingView:(UIView *)view
{
	// optional method
	<#statements_116#>
}
*/
/*
- (void)pickerView:(UIPickerView *)pickerView didSelectRow:(NSInteger)row inComponent:(NSInteger)component
{
	// optional method
	<#statements_117#>
}
*/
";
	},

	// 
	// Protocol UIScrollViewDelegate
	// 
	{
		Identifier = objc.protocols3_1.UIScrollViewDelegate;
		BasedOn = objc.protocols3_1;
		IsMenuItem = YES;
		Name = "UIScrollViewDelegate implementation (iPhoneOS 3.1)";
		CompletionPrefix = "UIScrollViewDelegate";
		OnlyAtBOL = YES;
		TextString = "
//
// MARK: UIScrollViewDelegate implementation
//

/*
- (void)scrollViewDidScroll:(UIScrollView *)scrollView
{
	// optional method
	// any offset changes
	<#statements_118#>
}
*/
/*
- (void)scrollViewWillBeginDragging:(UIScrollView *)scrollView
{
	// optional method
	// called on start of dragging (may require some time and or distance to move)
	<#statements_119#>
}
*/
/*
- (void)scrollViewDidEndDragging:(UIScrollView *)scrollView willDecelerate:(BOOL)decelerate
{
	// optional method
	// called on finger up if user dragged. decelerate is true if it will continue moving afterwards
	<#statements_120#>
}
*/
/*
- (void)scrollViewWillBeginDecelerating:(UIScrollView *)scrollView
{
	// optional method
	// called on finger up as we are moving
	<#statements_121#>
}
*/
/*
- (void)scrollViewDidEndDecelerating:(UIScrollView *)scrollView
{
	// optional method
	// called when scroll view grinds to a halt
	<#statements_122#>
}
*/
/*
- (void)scrollViewDidEndScrollingAnimation:(UIScrollView *)scrollView
{
	// optional method
	// called when setContentOffset/scrollRectVisible:animated: finishes. not called if not animating
	<#statements_123#>
}
*/
/*
- (UIView *)viewForZoomingInScrollView:(UIScrollView *)scrollView
{
	// optional method
	// return a view that will be scaled. if delegate returns nil, nothing happens
	<#statements_124#>
}
*/
/*
- (void)scrollViewDidEndZooming:(UIScrollView *)scrollView withView:(UIView *)view atScale:(float)scale
{
	// optional method
	// scale between minimum and maximum. called after any 'bounce' animations
	<#statements_125#>
}
*/
/*
- (BOOL)scrollViewShouldScrollToTop:(UIScrollView *)scrollView
{
	// optional method
	// return a yes if you want to scroll to the top. if not defined, assumes YES
	<#statements_126#>
}
*/
/*
- (void)scrollViewDidScrollToTop:(UIScrollView *)scrollView
{
	// optional method
	// called when scrolling animation finished. may be called immediately if already at top
	<#statements_127#>
}
*/
";
	},

	// 
	// Protocol UISearchBarDelegate
	// 
	{
		Identifier = objc.protocols3_1.UISearchBarDelegate;
		BasedOn = objc.protocols3_1;
		IsMenuItem = YES;
		Name = "UISearchBarDelegate implementation (iPhoneOS 3.1)";
		CompletionPrefix = "UISearchBarDelegate";
		OnlyAtBOL = YES;
		TextString = "
//
// MARK: UISearchBarDelegate implementation
//

/*
- (BOOL)searchBarShouldBeginEditing:(UISearchBar *)searchBar
{
	// optional method
	// return NO to not become first responder
	<#statements_128#>
}
*/
/*
- (void)searchBarTextDidBeginEditing:(UISearchBar *)searchBar
{
	// optional method
	// called when text starts editing
	<#statements_129#>
}
*/
/*
- (BOOL)searchBarShouldEndEditing:(UISearchBar *)searchBar
{
	// optional method
	// return NO to not resign first responder
	<#statements_130#>
}
*/
/*
- (void)searchBarTextDidEndEditing:(UISearchBar *)searchBar
{
	// optional method
	// called when text ends editing
	<#statements_131#>
}
*/
/*
- (void)searchBar:(UISearchBar *)searchBar textDidChange:(NSString *)searchText
{
	// optional method
	// called when text changes (including clear)
	<#statements_132#>
}
*/
/*
- (BOOL)searchBar:(UISearchBar *)searchBar shouldChangeTextInRange:(NSRange)range replacementText:(NSString *)text __OSX_AVAILABLE_STARTING(__MAC_NA,__IPHONE_3_0)
{
	// optional method
	// called before text changes
	<#statements_133#>
}
*/
/*
- (void)searchBarSearchButtonClicked:(UISearchBar *)searchBar
{
	// optional method
	// called when keyboard search button pressed
	<#statements_134#>
}
*/
/*
- (void)searchBarBookmarkButtonClicked:(UISearchBar *)searchBar
{
	// optional method
	// called when bookmark button pressed
	<#statements_135#>
}
*/
/*
- (void)searchBarCancelButtonClicked:(UISearchBar *) searchBar
{
	// optional method
	// called when cancel button pressed
	<#statements_136#>
}
*/
/*
- (void)searchBar:(UISearchBar *)searchBar selectedScopeButtonIndexDidChange:(NSInteger)selectedScope __OSX_AVAILABLE_STARTING(__MAC_NA,__IPHONE_3_0)
{
	// optional method
	<#statements_137#>
}
*/
";
	},

	// 
	// Protocol UISearchDisplayDelegate
	// 
	{
		Identifier = objc.protocols3_1.UISearchDisplayDelegate;
		BasedOn = objc.protocols3_1;
		IsMenuItem = YES;
		Name = "UISearchDisplayDelegate implementation (iPhoneOS 3.1)";
		CompletionPrefix = "UISearchDisplayDelegate";
		OnlyAtBOL = YES;
		TextString = "
//
// MARK: UISearchDisplayDelegate implementation
//

/*
- (void) searchDisplayControllerWillBeginSearch:(UISearchDisplayController *)controller
{
	// optional method
	<#statements_138#>
}
*/
/*
- (void) searchDisplayControllerDidBeginSearch:(UISearchDisplayController *)controller
{
	// optional method
	<#statements_139#>
}
*/
/*
- (void) searchDisplayControllerWillEndSearch:(UISearchDisplayController *)controller
{
	// optional method
	<#statements_140#>
}
*/
/*
- (void) searchDisplayControllerDidEndSearch:(UISearchDisplayController *)controller
{
	// optional method
	<#statements_141#>
}
*/
/*
- (void)searchDisplayController:(UISearchDisplayController *)controller didLoadSearchResultsTableView:(UITableView *)tableView
{
	// optional method
	<#statements_142#>
}
*/
/*
- (void)searchDisplayController:(UISearchDisplayController *)controller willUnloadSearchResultsTableView:(UITableView *)tableView
{
	// optional method
	<#statements_143#>
}
*/
/*
- (void)searchDisplayController:(UISearchDisplayController *)controller willShowSearchResultsTableView:(UITableView *)tableView
{
	// optional method
	<#statements_144#>
}
*/
/*
- (void)searchDisplayController:(UISearchDisplayController *)controller didShowSearchResultsTableView:(UITableView *)tableView
{
	// optional method
	<#statements_145#>
}
*/
/*
- (void)searchDisplayController:(UISearchDisplayController *)controller willHideSearchResultsTableView:(UITableView *)tableView
{
	// optional method
	<#statements_146#>
}
*/
/*
- (void)searchDisplayController:(UISearchDisplayController *)controller didHideSearchResultsTableView:(UITableView *)tableView
{
	// optional method
	<#statements_147#>
}
*/
/*
- (BOOL)searchDisplayController:(UISearchDisplayController *)controller shouldReloadTableForSearchString:(NSString *)searchString
{
	// optional method
	<#statements_148#>
}
*/
/*
- (BOOL)searchDisplayController:(UISearchDisplayController *)controller shouldReloadTableForSearchScope:(NSInteger)searchOption
{
	// optional method
	<#statements_149#>
}
*/
";
	},

	// 
	// Protocol UITabBarDelegate
	// 
	{
		Identifier = objc.protocols3_1.UITabBarDelegate;
		BasedOn = objc.protocols3_1;
		IsMenuItem = YES;
		Name = "UITabBarDelegate implementation (iPhoneOS 3.1)";
		CompletionPrefix = "UITabBarDelegate";
		OnlyAtBOL = YES;
		TextString = "
//
// MARK: UITabBarDelegate implementation
//

/*
- (void)tabBar:(UITabBar *)tabBar didSelectItem:(UITabBarItem *)item
{
	// optional method
	// called when a new view is selected by the user (but not programatically)
	<#statements_150#>
}
*/
/* called when user shows or dismisses customize sheet. you can use the 'willEnd' to set up what appears underneath. 
 changed is YES if there was some change to which items are visible or which order they appear. If selectedItem is no longer visible, 
 it will be set to nil.
 */
/*
- (void)tabBar:(UITabBar *)tabBar willBeginCustomizingItems:(NSArray *)items
{
	// optional method
	// called before customize sheet is shown. items is current item list
	<#statements_151#>
}
*/
/*
- (void)tabBar:(UITabBar *)tabBar didBeginCustomizingItems:(NSArray *)items
{
	// optional method
	// called after customize sheet is shown. items is current item list
	<#statements_152#>
}
*/
/*
- (void)tabBar:(UITabBar *)tabBar willEndCustomizingItems:(NSArray *)items changed:(BOOL)changed
{
	// optional method
	// called before customize sheet is hidden. items is new item list
	<#statements_153#>
}
*/
/*
- (void)tabBar:(UITabBar *)tabBar didEndCustomizingItems:(NSArray *)items changed:(BOOL)changed
{
	// optional method
	// called after customize sheet is hidden. items is new item list
	<#statements_154#>
}
*/
";
	},

	// 
	// Protocol UITabBarControllerDelegate
	// 
	{
		Identifier = objc.protocols3_1.UITabBarControllerDelegate;
		BasedOn = objc.protocols3_1;
		IsMenuItem = YES;
		Name = "UITabBarControllerDelegate implementation (iPhoneOS 3.1)";
		CompletionPrefix = "UITabBarControllerDelegate";
		OnlyAtBOL = YES;
		TextString = "
//
// MARK: UITabBarControllerDelegate implementation
//

/*
- (BOOL)tabBarController:(UITabBarController *)tabBarController shouldSelectViewController:(UIViewController *)viewController __OSX_AVAILABLE_STARTING(__MAC_NA,__IPHONE_3_0)
{
	// optional method
	<#statements_155#>
}
*/
/*
- (void)tabBarController:(UITabBarController *)tabBarController didSelectViewController:(UIViewController *)viewController
{
	// optional method
	<#statements_156#>
}
*/
/*
- (void)tabBarController:(UITabBarController *)tabBarController willBeginCustomizingViewControllers:(NSArray *)viewControllers __OSX_AVAILABLE_STARTING(__MAC_NA,__IPHONE_3_0)
{
	// optional method
	<#statements_157#>
}
*/
/*
- (void)tabBarController:(UITabBarController *)tabBarController willEndCustomizingViewControllers:(NSArray *)viewControllers changed:(BOOL)changed __OSX_AVAILABLE_STARTING(__MAC_NA,__IPHONE_3_0)
{
	// optional method
	<#statements_158#>
}
*/
/*
- (void)tabBarController:(UITabBarController *)tabBarController didEndCustomizingViewControllers:(NSArray *)viewControllers changed:(BOOL)changed
{
	// optional method
	<#statements_159#>
}
*/
";
	},

	// 
	// Protocol UITableViewDataSource
	// 
	{
		Identifier = objc.protocols3_1.UITableViewDataSource;
		BasedOn = objc.protocols3_1;
		IsMenuItem = YES;
		Name = "UITableViewDataSource implementation (iPhoneOS 3.1)";
		CompletionPrefix = "UITableViewDataSource";
		OnlyAtBOL = YES;
		TextString = "
//
// MARK: UITableViewDataSource implementation
//

- (NSInteger)tableView:(UITableView *)table numberOfRowsInSection:(NSInteger)section
{
	// required method
	<#statements_160#>
}
- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath
{
	// required method
	<#statements_161#>
}
/*
- (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView
{
	// optional method
	// Default is 1 if not implemented
	<#statements_162#>
}
*/
/*
- (NSString *)tableView:(UITableView *)tableView titleForHeaderInSection:(NSInteger)section
{
	// optional method
	// fixed font style. use custom view (UILabel) if you want something different
	<#statements_163#>
}
*/
/*
- (NSString *)tableView:(UITableView *)tableView titleForFooterInSection:(NSInteger)section
{
	// optional method
	<#statements_164#>
}
*/
/*
- (BOOL)tableView:(UITableView *)tableView canEditRowAtIndexPath:(NSIndexPath *)indexPath
{
	// optional method
	<#statements_165#>
}
*/
/*
- (BOOL)tableView:(UITableView *)tableView canMoveRowAtIndexPath:(NSIndexPath *)indexPath
{
	// optional method
	<#statements_166#>
}
*/
/*
- (NSArray *)sectionIndexTitlesForTableView:(UITableView *)tableView
{
	// optional method
	// return list of section titles to display in section index view (e.g. \"ABCD...Z#\")
	<#statements_167#>
}
*/
/*
- (NSInteger)tableView:(UITableView *)tableView sectionForSectionIndexTitle:(NSString *)title atIndex:(NSInteger)index
{
	// optional method
	// tell table which section corresponds to section title/index (e.g. \"B\",1))
	<#statements_168#>
}
*/
/*
- (void)tableView:(UITableView *)tableView commitEditingStyle:(UITableViewCellEditingStyle)editingStyle forRowAtIndexPath:(NSIndexPath *)indexPath
{
	// optional method
	<#statements_169#>
}
*/
/*
- (void)tableView:(UITableView *)tableView moveRowAtIndexPath:(NSIndexPath *)sourceIndexPath toIndexPath:(NSIndexPath *)destinationIndexPath
{
	// optional method
	<#statements_170#>
}
*/
";
	},

	// 
	// Protocol UITableViewDelegate
	// 
	{
		Identifier = objc.protocols3_1.UITableViewDelegate;
		BasedOn = objc.protocols3_1;
		IsMenuItem = YES;
		Name = "UITableViewDelegate implementation (iPhoneOS 3.1)";
		CompletionPrefix = "UITableViewDelegate";
		OnlyAtBOL = YES;
		TextString = "
//
// MARK: UITableViewDelegate implementation
//

/*
- (void)tableView:(UITableView *)tableView willDisplayCell:(UITableViewCell *)cell forRowAtIndexPath:(NSIndexPath *)indexPath
{
	// optional method
	<#statements_171#>
}
*/
/*
- (CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath
{
	// optional method
	<#statements_172#>
}
*/
/*
- (CGFloat)tableView:(UITableView *)tableView heightForHeaderInSection:(NSInteger)section
{
	// optional method
	<#statements_173#>
}
*/
/*
- (CGFloat)tableView:(UITableView *)tableView heightForFooterInSection:(NSInteger)section
{
	// optional method
	<#statements_174#>
}
*/
/*
- (UIView *)tableView:(UITableView *)tableView viewForHeaderInSection:(NSInteger)section
{
	// optional method
	// custom view for header. will be adjusted to default or specified header height
	<#statements_175#>
}
*/
/*
- (UIView *)tableView:(UITableView *)tableView viewForFooterInSection:(NSInteger)section
{
	// optional method
	// custom view for footer. will be adjusted to default or specified footer height
	<#statements_176#>
}
*/
/*
- (UITableViewCellAccessoryType)tableView:(UITableView *)tableView accessoryTypeForRowWithIndexPath:(NSIndexPath *)indexPath __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_NA,__MAC_NA,__IPHONE_2_0,__IPHONE_3_0)
{
	// optional method
	<#statements_177#>
}
*/
/*
- (void)tableView:(UITableView *)tableView accessoryButtonTappedForRowWithIndexPath:(NSIndexPath *)indexPath
{
	// optional method
	<#statements_178#>
}
*/
/*
- (NSIndexPath *)tableView:(UITableView *)tableView willSelectRowAtIndexPath:(NSIndexPath *)indexPath
{
	// optional method
	<#statements_179#>
}
*/
/*
- (NSIndexPath *)tableView:(UITableView *)tableView willDeselectRowAtIndexPath:(NSIndexPath *)indexPath __OSX_AVAILABLE_STARTING(__MAC_NA,__IPHONE_3_0)
{
	// optional method
	<#statements_180#>
}
*/
/*
- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath
{
	// optional method
	<#statements_181#>
}
*/
/*
- (void)tableView:(UITableView *)tableView didDeselectRowAtIndexPath:(NSIndexPath *)indexPath __OSX_AVAILABLE_STARTING(__MAC_NA,__IPHONE_3_0)
{
	// optional method
	<#statements_182#>
}
*/
/*
- (UITableViewCellEditingStyle)tableView:(UITableView *)tableView editingStyleForRowAtIndexPath:(NSIndexPath *)indexPath
{
	// optional method
	<#statements_183#>
}
*/
/*
- (NSString *)tableView:(UITableView *)tableView titleForDeleteConfirmationButtonForRowAtIndexPath:(NSIndexPath *)indexPath __OSX_AVAILABLE_STARTING(__MAC_NA,__IPHONE_3_0)
{
	// optional method
	<#statements_184#>
}
*/
/*
- (BOOL)tableView:(UITableView *)tableView shouldIndentWhileEditingRowAtIndexPath:(NSIndexPath *)indexPath
{
	// optional method
	<#statements_185#>
}
*/
/*
- (void)tableView:(UITableView*)tableView willBeginEditingRowAtIndexPath:(NSIndexPath *)indexPath
{
	// optional method
	<#statements_186#>
}
*/
/*
- (void)tableView:(UITableView*)tableView didEndEditingRowAtIndexPath:(NSIndexPath *)indexPath
{
	// optional method
	<#statements_187#>
}
*/
/*
- (NSIndexPath *)tableView:(UITableView *)tableView targetIndexPathForMoveFromRowAtIndexPath:(NSIndexPath *)sourceIndexPath toProposedIndexPath:(NSIndexPath *)proposedDestinationIndexPath
{
	// optional method
	<#statements_188#>
}
*/
/*
- (NSInteger)tableView:(UITableView *)tableView indentationLevelForRowAtIndexPath:(NSIndexPath *)indexPath
{
	// optional method
	// return 'depth' of row for hierarchies
	<#statements_189#>
}
*/
";
	},

	// 
	// Protocol UITextFieldDelegate
	// 
	{
		Identifier = objc.protocols3_1.UITextFieldDelegate;
		BasedOn = objc.protocols3_1;
		IsMenuItem = YES;
		Name = "UITextFieldDelegate implementation (iPhoneOS 3.1)";
		CompletionPrefix = "UITextFieldDelegate";
		OnlyAtBOL = YES;
		TextString = "
//
// MARK: UITextFieldDelegate implementation
//

/*
- (BOOL)textFieldShouldBeginEditing:(UITextField *)textField
{
	// optional method
	// return NO to disallow editing.
	<#statements_190#>
}
*/
/*
- (void)textFieldDidBeginEditing:(UITextField *)textField
{
	// optional method
	// became first responder
	<#statements_191#>
}
*/
/*
- (BOOL)textFieldShouldEndEditing:(UITextField *)textField
{
	// optional method
	// return YES to allow editing to stop and to resign first responder status. NO to disallow the editing session to end
	<#statements_192#>
}
*/
/*
- (void)textFieldDidEndEditing:(UITextField *)textField
{
	// optional method
	// may be called if forced even if shouldEndEditing returns NO (e.g. view removed from window) or endEditing:YES called
	<#statements_193#>
}
*/
/*
- (BOOL)textField:(UITextField *)textField shouldChangeCharactersInRange:(NSRange)range replacementString:(NSString *)string
{
	// optional method
	// return NO to not change text
	<#statements_194#>
}
*/
/*
- (BOOL)textFieldShouldClear:(UITextField *)textField
{
	// optional method
	// called when clear button pressed. return NO to ignore (no notifications)
	<#statements_195#>
}
*/
/*
- (BOOL)textFieldShouldReturn:(UITextField *)textField
{
	// optional method
	// called when 'return' key pressed. return NO to ignore.
	<#statements_196#>
}
*/
";
	},

	// 
	// Protocol UITextInputTraits
	// 
	{
		Identifier = objc.protocols3_1.UITextInputTraits;
		BasedOn = objc.protocols3_1;
		IsMenuItem = YES;
		Name = "UITextInputTraits implementation (iPhoneOS 3.1)";
		CompletionPrefix = "UITextInputTraits";
		OnlyAtBOL = YES;
		TextString = "
//
// MARK: UITextInputTraits implementation
//

";
	},

	// 
	// Protocol UITextViewDelegate
	// 
	{
		Identifier = objc.protocols3_1.UITextViewDelegate;
		BasedOn = objc.protocols3_1;
		IsMenuItem = YES;
		Name = "UITextViewDelegate implementation (iPhoneOS 3.1)";
		CompletionPrefix = "UITextViewDelegate";
		OnlyAtBOL = YES;
		TextString = "
//
// MARK: UITextViewDelegate implementation
//

/*
- (BOOL)textViewShouldBeginEditing:(UITextView *)textView
{
	// optional method
	<#statements_197#>
}
*/
/*
- (BOOL)textViewShouldEndEditing:(UITextView *)textView
{
	// optional method
	<#statements_198#>
}
*/
/*
- (void)textViewDidBeginEditing:(UITextView *)textView
{
	// optional method
	<#statements_199#>
}
*/
/*
- (void)textViewDidEndEditing:(UITextView *)textView
{
	// optional method
	<#statements_200#>
}
*/
/*
- (BOOL)textView:(UITextView *)textView shouldChangeTextInRange:(NSRange)range replacementText:(NSString *)text
{
	// optional method
	<#statements_201#>
}
*/
/*
- (void)textViewDidChange:(UITextView *)textView
{
	// optional method
	<#statements_202#>
}
*/
/*
- (void)textViewDidChangeSelection:(UITextView *)textView
{
	// optional method
	<#statements_203#>
}
*/
";
	},

	// 
	// Protocol UIVideoEditorControllerDelegate
	// 
	{
		Identifier = objc.protocols3_1.UIVideoEditorControllerDelegate;
		BasedOn = objc.protocols3_1;
		IsMenuItem = YES;
		Name = "UIVideoEditorControllerDelegate implementation (iPhoneOS 3.1)";
		CompletionPrefix = "UIVideoEditorControllerDelegate";
		OnlyAtBOL = YES;
		TextString = "
//
// MARK: UIVideoEditorControllerDelegate implementation
//

/*
- (void)videoEditorController:(UIVideoEditorController *)editor didSaveEditedVideoToPath:(NSString *)editedVideoPath
{
	// optional method
	// edited video is saved to a path in app's temporary directory
	<#statements_204#>
}
*/
/*
- (void)videoEditorController:(UIVideoEditorController *)editor didFailWithError:(NSError *)error
{
	// optional method
	<#statements_205#>
}
*/
/*
- (void)videoEditorControllerDidCancel:(UIVideoEditorController *)editor
{
	// optional method
	<#statements_206#>
}
*/
";
	},

	// 
	// Protocol UIWebViewDelegate
	// 
	{
		Identifier = objc.protocols3_1.UIWebViewDelegate;
		BasedOn = objc.protocols3_1;
		IsMenuItem = YES;
		Name = "UIWebViewDelegate implementation (iPhoneOS 3.1)";
		CompletionPrefix = "UIWebViewDelegate";
		OnlyAtBOL = YES;
		TextString = "
//
// MARK: UIWebViewDelegate implementation
//

/*
- (BOOL)webView:(UIWebView *)webView shouldStartLoadWithRequest:(NSURLRequest *)request navigationType:(UIWebViewNavigationType)navigationType
{
	// optional method
	<#statements_207#>
}
*/
/*
- (void)webViewDidStartLoad:(UIWebView *)webView
{
	// optional method
	<#statements_208#>
}
*/
/*
- (void)webViewDidFinishLoad:(UIWebView *)webView
{
	// optional method
	<#statements_209#>
}
*/
/*
- (void)webView:(UIWebView *)webView didFailLoadWithError:(NSError *)error
{
	// optional method
	<#statements_210#>
}
*/
";
	},
)
